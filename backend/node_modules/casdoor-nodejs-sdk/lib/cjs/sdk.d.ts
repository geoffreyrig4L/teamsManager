import { Config } from './config';
import { User } from './user';
import { Adapter } from './adapter';
import { Application } from './application';
import { Cert } from './cert';
import { Enforcer } from './enforcer';
import { Group } from './group';
import { Model } from './model';
import { Organization } from './organization';
import { Payment } from './payment';
import { Session } from './session';
import { Syncer } from './syncer';
import { Permission } from './permission';
import { Plan } from './plan';
import { Pricing } from './pricing';
import { Provider } from './provider';
import { Resource } from './resource';
import { Role } from './role';
import { Subscription } from './subscription';
import { Token } from './token';
import { Webhook } from './webhook';
import { Product } from './product';
export declare class SDK {
    private readonly config;
    private readonly request;
    private userSDK;
    private adapterSDK;
    private applicationSDK;
    private certSDK;
    private enforcerSDK;
    private groupSDK;
    private modelSDK;
    private organizationSDK;
    private paymentSDK;
    private sessionSDK;
    private syncerSDK;
    private permissionSDK;
    private planSDK;
    private pricingSDK;
    private providerSDK;
    private resourceSDK;
    private roleSDK;
    private subscriptionSDK;
    private tokenSDK;
    private webhookSDK;
    private productSDK;
    constructor(config: Config);
    getAuthToken(code: string): Promise<{
        access_token: string;
        refresh_token: string;
    }>;
    parseJwtToken(token: string): User;
    getUsers(): Promise<import("axios").AxiosResponse<{
        data: User[];
    }>>;
    getUser(id: string): Promise<import("axios").AxiosResponse<{
        data: User;
    }>>;
    getUserCount(isOnline: boolean): Promise<import("axios").AxiosResponse<number>>;
    addUser(user: User): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateUser(user: User): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteUser(user: User): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getAdapters(): Promise<import("axios").AxiosResponse<{
        data: Adapter[];
    }>>;
    getAdapter(id: string): Promise<import("axios").AxiosResponse<{
        data: Adapter;
    }>>;
    addAdapter(adapter: Adapter): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateAdapter(adapter: Adapter): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteAdapter(adapter: Adapter): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getApplications(): Promise<import("axios").AxiosResponse<{
        data: Application[];
    }>>;
    getApplication(name: string): Promise<import("axios").AxiosResponse<{
        data: Application;
    }>>;
    addApplication(application: Application): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateApplication(application: Application): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteApplication(application: Application): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getCerts(): Promise<import("axios").AxiosResponse<{
        data: Cert[];
    }>>;
    getCert(id: string): Promise<import("axios").AxiosResponse<{
        data: Cert;
    }>>;
    addCert(cert: Cert): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateCert(cert: Cert): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteCert(cert: Cert): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getEnforcers(): Promise<import("axios").AxiosResponse<{
        data: Enforcer[];
    }>>;
    getEnforcer(id: string): Promise<import("axios").AxiosResponse<{
        data: Enforcer;
    }>>;
    addEnforcer(enforcer: Enforcer): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateEnforcer(enforcer: Enforcer): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteEnforcer(enforcer: Enforcer): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getGroups(): Promise<import("axios").AxiosResponse<{
        data: Group[];
    }>>;
    getGroup(id: string): Promise<import("axios").AxiosResponse<{
        data: Group;
    }>>;
    addGroup(group: Group): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateGroup(group: Group): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteGroup(group: Group): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getModels(): Promise<import("axios").AxiosResponse<{
        data: Model[];
    }>>;
    getModel(id: string): Promise<import("axios").AxiosResponse<{
        data: Model;
    }>>;
    addModel(model: Model): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateModel(model: Model): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteModel(model: Model): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getOrganizations(): Promise<import("axios").AxiosResponse<{
        data: Organization[];
    }>>;
    getOrganization(id: string): Promise<import("axios").AxiosResponse<{
        data: Organization;
    }>>;
    addOrganization(organization: Organization): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateOrganization(organization: Organization): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteOrganization(organization: Organization): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getPayments(): Promise<import("axios").AxiosResponse<{
        data: Payment[];
    }>>;
    getPayment(id: string): Promise<import("axios").AxiosResponse<{
        data: Payment;
    }>>;
    addPayment(payment: Payment): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updatePayment(payment: Payment): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deletePayment(payment: Payment): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getSessions(): Promise<import("axios").AxiosResponse<{
        data: Session[];
    }>>;
    getSession(name: string, application: string): Promise<import("axios").AxiosResponse<{
        data: Session;
    }>>;
    addSession(session: Session): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateSession(session: Session): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteSession(session: Session): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getSyncers(): Promise<import("axios").AxiosResponse<{
        data: Syncer[];
    }>>;
    getSyncer(id: string): Promise<import("axios").AxiosResponse<{
        data: Syncer;
    }>>;
    addSyncer(syncer: Syncer): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateSyncer(syncer: Syncer): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteSyncer(syncer: Syncer): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getPermissions(): Promise<import("axios").AxiosResponse<{
        data: Permission[];
    }>>;
    getPermission(id: string): Promise<import("axios").AxiosResponse<{
        data: Permission;
    }>>;
    addPermission(permission: Permission): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updatePermission(permission: Permission): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deletePermission(permission: Permission): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getPlans(): Promise<import("axios").AxiosResponse<{
        data: Plan[];
    }>>;
    getPlan(id: string): Promise<import("axios").AxiosResponse<{
        data: Plan;
    }>>;
    addPlan(plan: Plan): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updatePlan(plan: Plan): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deletePlan(plan: Plan): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getPricings(): Promise<import("axios").AxiosResponse<{
        data: Pricing[];
    }>>;
    getPricing(id: string): Promise<import("axios").AxiosResponse<{
        data: Pricing;
    }>>;
    addPricing(pricing: Pricing): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updatePricing(pricing: Pricing): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deletePricing(pricing: Pricing): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getProviders(): Promise<import("axios").AxiosResponse<{
        data: Provider[];
    }>>;
    getProvider(id: string): Promise<import("axios").AxiosResponse<{
        data: Provider;
    }>>;
    addProvider(provider: Provider): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateProvider(provider: Provider): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteProvider(provider: Provider): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getResources(owner: string, user: string, field: string, value: string, sortField: string, sortOrder: string): Promise<import("axios").AxiosResponse<{
        data: Resource[];
    }>>;
    getResource(id: string): Promise<import("axios").AxiosResponse<{
        data: Resource;
    }>>;
    addResource(resource: Resource): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateResource(resource: Resource): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteResource(resource: Resource): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    uploadResource(resource: Resource, file: any): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getRoles(): Promise<import("axios").AxiosResponse<{
        data: Role[];
    }>>;
    getRole(id: string): Promise<import("axios").AxiosResponse<{
        data: Role;
    }>>;
    addRole(role: Role): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateRole(role: Role): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteRole(role: Role): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getSubscriptions(): Promise<import("axios").AxiosResponse<{
        data: Subscription[];
    }>>;
    getSubscription(id: string): Promise<import("axios").AxiosResponse<{
        data: Subscription;
    }>>;
    addSubscription(subscription: Subscription): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateSubscription(subscription: Subscription): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteSubscription(subscription: Subscription): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getTokens(p: number, pageSize: number): Promise<import("axios").AxiosResponse<{
        data: Token[];
    }>>;
    getToken(id: string): Promise<import("axios").AxiosResponse<{
        data: Token;
    }>>;
    addToken(token: Token): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateToken(token: Token): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteToken(token: Token): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getWebhooks(): Promise<import("axios").AxiosResponse<{
        data: Webhook[];
    }>>;
    getWebhook(id: string): Promise<import("axios").AxiosResponse<{
        data: Webhook;
    }>>;
    addWebhook(webhook: Webhook): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateWebhook(webhook: Webhook): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteWebhook(webhook: Webhook): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    getProducts(): Promise<import("axios").AxiosResponse<{
        data: Product[];
    }>>;
    getProduct(id: string): Promise<import("axios").AxiosResponse<{
        data: Product;
    }>>;
    addProduct(product: Product): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    updateProduct(product: Product): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
    deleteProduct(product: Product): Promise<import("axios").AxiosResponse<Record<string, unknown>>>;
}
