import { AxiosResponse } from 'axios';
import { Config } from './config';
import Request from './request';
export interface User {
    owner: string;
    name: string;
    createdTime: string;
    updatedTime?: string;
    id?: string;
    type?: string;
    password?: string;
    passwordSalt?: string;
    displayName?: string;
    firstName?: string;
    lastName?: string;
    avatar?: string;
    permanentAvatar?: string;
    email?: string;
    emailVerified?: boolean;
    phone?: string;
    location?: string;
    address?: string[];
    affiliation?: string;
    title?: string;
    idCardType?: string;
    idCard?: string;
    homepage?: string;
    bio?: string;
    tag?: string;
    region?: string;
    language?: string;
    gender?: string;
    birthday?: string;
    education?: string;
    score?: number;
    karma?: number;
    ranking?: number;
    isDefaultAvatar?: boolean;
    isOnline?: boolean;
    isAdmin?: boolean;
    isGlobalAdmin?: boolean;
    isForbidden?: boolean;
    isDeleted?: boolean;
    signupApplication?: string;
    hash?: string;
    preHash?: string;
    createdIp?: string;
    lastSigninTime?: string;
    lastSigninIp?: string;
    github?: string;
    google?: string;
    qq?: string;
    wechat?: string;
    facebook?: string;
    dingtalk?: string;
    weibo?: string;
    gitee?: string;
    linkedin?: string;
    wecom?: string;
    lark?: string;
    gitlab?: string;
    adfs?: string;
    baidu?: string;
    alipay?: string;
    casdoor?: string;
    infoflow?: string;
    apple?: string;
    azuread?: string;
    slack?: string;
    steam?: string;
    bilibili?: string;
    okta?: string;
    douyin?: string;
    custom?: string;
    ldap?: string;
    properties?: Record<string, string>;
}
export declare class UserSDK {
    private config;
    private readonly request;
    constructor(config: Config, request: Request);
    getAuthToken(code: string): Promise<{
        access_token: string;
        refresh_token: string;
    }>;
    parseJwtToken(token: string): User;
    getUsers(): Promise<AxiosResponse<{
        data: User[];
    }>>;
    getUser(id: string): Promise<AxiosResponse<{
        data: User;
    }>>;
    getUserCount(isOnline: boolean): Promise<AxiosResponse<number>>;
    modifyUser(method: string, user: User): Promise<AxiosResponse<Record<string, unknown>>>;
    addUser(user: User): Promise<AxiosResponse<Record<string, unknown>>>;
    updateUser(user: User): Promise<AxiosResponse<Record<string, unknown>>>;
    deleteUser(user: User): Promise<AxiosResponse<Record<string, unknown>>>;
}
